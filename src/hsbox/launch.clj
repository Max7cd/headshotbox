(ns hsbox.launch
  (:require [hsbox.stats :as stats])
  (:require [hsbox.util :refer [file-exists?]])
  (:require [hsbox.db :as db])
  (:require [clojure.java.io :as io]))

(taoensso.timbre/refer-timbre)

(def HEADSHOTBOX-WATERMARK "// Generated by Headshot Box")

(defn vdm-watch [demo steamid tick & [tick-end]]
  (let [user-id (get (:player_slots demo) steamid)
        commands [{:factory  "PlayCommands"
                   :tick     (or tick 0)
                   :commands (str "spec_player " (inc user-id))}]]
    (if tick-end
      (conj commands {:factory  "PlayCommands"
                      :tick     tick-end
                      :commands "quit"})
      commands)))

(defn generate-command [number command]
  (let [line (fn [key value] (str "\t\t" key " \"" value "\"\n"))]
    (str "\t\"" number "\"\n"
         "\t{\n"
         (line "factory" (:factory command))
         (line "name" ".")
         (line "starttick" (:tick command))
         (when (= (:factory command) "PlayCommands")
           (line "commands" (:commands command)))
         "\t}\n")))

(defn generate-vdm [commands]
  (str HEADSHOTBOX-WATERMARK
       "\ndemoactions\n{\n"
       (apply str
         (mapv #(generate-command (first %) (second %))
               (map vector (rest (range)) commands)))
       "}\n"))

(defn watch [demoid steamid round-number tick highlight]
  (let [demo (get stats/demos demoid)
        demo-path (db/demo-path demoid)
        vdm-path (str (subs demo-path 0 (- (count demo-path) 4)) ".vdm")]
    (when (and
            demo
            (file-exists? demo-path)
            ; Don't rewrite the .vdm if not created by headshot box
            (or (not (file-exists? vdm-path))
                (.startsWith (slurp vdm-path) HEADSHOTBOX-WATERMARK)))
      (if (#{"high" "low"} highlight)
        (when (file-exists? vdm-path)
          (debug "Deleting vdm file" vdm-path)
          (io/delete-file vdm-path true))
        (do
          (when round-number
            (assert (<= 1 round-number (count (:rounds demo)))))
          (let [round (when round-number (nth (:rounds demo) (dec round-number)))
                tick (if (not (nil? round))
                       (+ (:tick round)
                          (stats/seconds-to-ticks 15 (:tickrate demo)))
                       tick)]
            (debug "Writing vdm file" vdm-path)
            (spit vdm-path (generate-vdm (vdm-watch demo steamid tick
                                                    (when round (+ (:tick_end round)
                                                                   (stats/seconds-to-ticks 5 (:tickrate demo)))))))))))
    {:url (str "steam://rungame/730/" steamid "/+playdemo \"" demo-path
               (when tick (str "@" tick)) "\" " (when highlight steamid) (when (= highlight "low") " lowlights"))}))
